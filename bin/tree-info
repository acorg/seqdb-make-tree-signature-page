#! /usr/bin/env python3
# -*- Python -*-

import sys, traceback
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
from pathlib import Path
sys.path[:0] = [str(Path(sys.argv[0]).resolve().parents[1].joinpath("dist")), str(Path(sys.argv[0]).resolve().parents[1].joinpath("python"))]
import logging; module_logger = logging.getLogger(__name__)

import seqdb
from seqdb import open_file

# ----------------------------------------------------------------------

def main(args):
    tree = seqdb.import_tree(args.input[0])
    if args.path_to_seqdb:
        seq_db = seqdb.Seqdb()
        seq_db.load(filename=args.path_to_seqdb)
        tree.match_seqdb(seq_db)
        tree.ladderize()        # must be before clade_setup()
        tree.clade_setup()
    else:
        tree.ladderize()
    if args.command[0] == "list":
        # list names in the tree
        print("\n".join(tree.names()))
    else:
        raise ValueError("Unrecognized command: " + args.command[0])

# ----------------------------------------------------------------------

with seqdb.timeit(sys.argv[0]):
    try:
        import argparse
        parser = argparse.ArgumentParser(description=__doc__)
        parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')

        parser.add_argument('input', nargs=1, help='source tree.')
        parser.add_argument('command', nargs=1, help='command to execute: list.')

        parser.add_argument('--db', action='store', dest='path_to_seqdb', default=None, help='Path to sequence database (to match tree leaves with seqdb entries).')
        # parser.add_argument('--email', action='store', dest='email', default="eu@antigenic-cartography.org", help='Email to report status of the tasks running in the cluster.')

        args = parser.parse_args()
        logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
        exit_code = main(args)
    except Exception as err:
        logging.error('{}\n{}'.format(err, traceback.format_exc()))
        exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
