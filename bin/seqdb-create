#! /usr/bin/env python3
# -*- Python -*-

"""
Creates (non-whocc) seqdb from fasta files.
"""

import sys, os, traceback, pprint
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
from pathlib import Path
sys.path[:0] = [str(Path(sys.argv[0]).resolve().parents[1].joinpath("dist")), str(Path(sys.argv[0]).resolve().parents[1].joinpath("python"))]
import logging; module_logger = logging.getLogger(__name__)

import seqdb
from seqdb import fasta as fasta_m, timeit, normalize
from seqdb.update import SeqdbUpdater
from seqdb.hidb import HiDb

# ----------------------------------------------------------------------

def main(args):
    db = seqdb.Seqdb()
    db_updater = SeqdbUpdater(db, filename=args.path_to_db, normalize_names=False, load=False)
    for filename in args.input:
        data = fasta_m.read_fasta_with_name_parsing(fasta_file=filename, lab="", virus_type="")
        module_logger.info('{} entries to update seqdb with'.format(len(data)))
        # pprint.pprint(data)
        db_updater.add(data)
    if args.add_clades:
        db_updater.add_clades()               # clades must be updated after matching with hidb, because matching provides info about B lineage
    print(db.report())
    if args.report_identical:
        print(db.report_identical())
    if args.report_not_aligned_prefixes:
        print(db.report_not_aligned(args.report_not_aligned_prefixes))
    if args.save:
        db_updater.save(indent=1)

# ----------------------------------------------------------------------

with timeit(sys.argv[0]):
    try:
        import argparse
        parser = argparse.ArgumentParser(description=__doc__)
        parser.add_argument('input', nargs="+", help='Fasta files to process (instead of processing all in -i).')
        parser.add_argument('--db', action='store', dest='path_to_db', required=True, help='Path to sequence database.')
        parser.add_argument('-n', '--no-save', action='store_false', dest='save', default=True, help='Do not save resulting database.')
        # parser.add_argument('--gene', action='store', dest='default_gene', default="HA", help='default gene.')
        # parser.add_argument('--acmacs', action='store', dest='acmacs_url', default='https://localhost:1168', help='AcmacsWeb server host and port, e.g. https://localhost:1168.')
        # parser.add_argument('--hidb', action='store', dest='path_to_hidb', default="~/WHO/hidb.json.xz", help='Path to HI database.')
        parser.add_argument('--clades', action='store_true', dest='add_clades', default=False, help='Add clade information to seqdb.')
        parser.add_argument('--report-identical', action='store_true', dest='report_identical', default=False, help='Report identical sequences.')
        parser.add_argument('--report-not-aligned-prefixes', type=int, action='store', dest='report_not_aligned_prefixes', default=None, help='Report prefixes of not aligned aa sequences up to the specified length (signal peptide is often 16).')
        parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
        args = parser.parse_args()
        logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
        exit_code = main(args)
    except Exception as err:
        logging.error('{}\n{}'.format(err, traceback.format_exc()))
        exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
