#! /usr/bin/env python3
# -*- Python -*-

import sys, os, subprocess, traceback, json
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
from pathlib import Path
sys.path[:0] = [str(Path(sys.argv[0]).resolve().parents[1].joinpath("dist")), str(Path(sys.argv[0]).resolve().parents[1].joinpath("python"))]
import logging; module_logger = logging.getLogger(__name__)

import seqdb
from seqdb import open_file

# ----------------------------------------------------------------------

def main(args):
    tree = seqdb.import_tree(args.input[0])
    if args.path_to_seqdb:
        seq_db = seqdb.Seqdb()
        seq_db.load(filename=args.path_to_seqdb)
        tree.match_seqdb(seq_db)
        tree.ladderize()        # must be before clade_setup()
        tree.clade_setup()
    else:
        tree.ladderize()
    if args.show_aa_transitions:
        if args.show_aa_transitions.lower() == "all":
            tree.make_aa_transitions()
        else:
            tree.make_aa_transitions(sorted(set(int(pos) - 1 for pos in args.show_aa_transitions.split(","))))

    if args.report_aa_per_pos:
        for pos, aas in enumerate(tree.aa_per_pos(), start=1):
            print("{:3d} {}".format(pos, json.dumps(aas, sort_keys=True)))

    tree.settings().draw_tree.grid_step = args.grid_step
    tree.settings().draw_tree.aa_transition.show_node_for_left_line = args.aa_transition_left_line
    tree.settings().draw_tree.aa_transition.show_empty_left = args.aa_transition_empty_left
    tree.settings().draw_tree.aa_transition.show_on_leaf = args.aa_transition_on_leaf

    if args.chart:
        surface = seqdb.Surface(args.output[0], 1422, 800)
    else:
        surface = seqdb.Surface(args.output[0], 600, 850)

    # surface.line(seqdb.Location(100, 100), seqdb.Location(300, 200), 0xFFA500, 5, seqdb.LINE_CAP_ROUND)
    # surface.double_arrow(seqdb.Location(100, 200), seqdb.Location(250, 50), 0x80FF00A5, 5, 10)
    # surface.text(seqdb.Location(100, 300), "Whatever that means", 0, 20, rotation=0.2)
    # print("Text size", surface.text_size("Text size", 50))

    # draw_tree = seqdb.DrawTree()
    # (draw_tree
    #  .title(seqdb.Text(seqdb.Location(0, 30), "Akvirrr", 0xC0000000, 30))
    #  .prepare(tree)
    #  .color_by_continent(args.color_by_continent)
    #  .color_by_pos(args.color_by_pos - 1)
    #  .draw(tree, surface, seqdb.Viewport(seqdb.Location(10, 10), seqdb.Size(680, 830))))

    parts = seqdb.Show.Title | seqdb.Show.Tree | seqdb.Show.Legend | seqdb.Show.TimeSeries
    if args.show_clades:
        parts |= seqdb.Show.Clades

    if args.chart:
        chart = seqdb.import_chart(args.chart)
        parts |= seqdb.Show.AntigenicMaps
    else:
        chart = None

    virus_type = tree.virus_type()
    lineage = tree.lineage()
    if virus_type:
        title = virus_type
        if lineage:
            if lineage in ["VICTORIA", "YAMAGATA"]:
                lineage = lineage[:3].capitalize()
            title += "/" + lineage
    else:
        title = ""
    signature_page = seqdb.SignaturePage()
    (signature_page
     .select_parts(parts)
     .title(seqdb.Text(seqdb.Location(0, 10), title, 0, 20))
     .color_by_continent(args.color_by_continent)
     .color_by_pos(args.color_by_pos - 1)
     .prepare(tree, chart)
     .draw(tree, surface, chart))

# ----------------------------------------------------------------------

with seqdb.timeit(sys.argv[0]):
    try:
        import argparse
        print(sys.argv)
        parser = argparse.ArgumentParser(description=__doc__)
        parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')

        parser.add_argument('input', nargs=1, help='source tree.')
        parser.add_argument('output', nargs=1, help='output pdf filename.')

        parser.add_argument('--continents', action='store_true', dest='color_by_continent', default=False, help='Color tree and time series by continent.')
        parser.add_argument('--pos', action='store', type=int, dest='color_by_pos', default=-1, help='Color tree and time series by AA at the provided position.')
        parser.add_argument('--show-aa-transitions', action='store', dest='show_aa_transitions', default=None, help='Show aa transition labels for the provided comma separated list of positions, use all to show all.')

        parser.add_argument('--no-clades', action='store_false', dest='show_clades', default=True, help='Do not show clades.')
        parser.add_argument('--show-aa-transition-left-line', action='store_true', dest='aa_transition_left_line', default=False, help='Show line telling how left part of aa transition has been calculated.')
        parser.add_argument('--show-aa-transition-empty-left', action='store_true', dest='aa_transition_empty_left', default=False, help='Show AA transition labels for labels with an empty left part.')
        parser.add_argument('--show-aa-transition-on-leaf', action='store_true', dest='aa_transition_on_leaf', default=False, help='Show AA transition on the leaf branches.')
        parser.add_argument('--grid', action='store', type=int, dest='grid_step', default=0, help='Show grid with the provided step (number of strains per cell).')
        parser.add_argument('--report-aa-per-pos', action='store_true', dest='report_aa_per_pos', default=False, help='Print to stdout list of AAs found at each pos.')

        parser.add_argument('--chart', action='store', dest='chart', default=None, help='Chart (in sdb format) to use for antigenic maps.')

        parser.add_argument('--db', action='store', dest='path_to_seqdb', default=None, help='Path to sequence database (to match tree leaves with seqdb entries).')
        # parser.add_argument('--email', action='store', dest='email', default="eu@antigenic-cartography.org", help='Email to report status of the tasks running in the cluster.')

        args = parser.parse_args()
        logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
        exit_code = main(args)
    except Exception as err:
        logging.error('{}\n{}'.format(err, traceback.format_exc()))
        exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
