#! /usr/bin/env python3
# -*- Python -*-

"""
Updates/creates seqdb with WHO CC sequence data.
"""

import sys, os, traceback, pprint
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
from pathlib import Path
sys.path[:0] = [str(Path(sys.argv[0]).resolve().parents[1].joinpath("dist")), str(Path(sys.argv[0]).resolve().parents[1].joinpath("python"))]
import logging; module_logger = logging.getLogger(__name__)

import seqdb
from seqdb import fasta as fasta_m, fasta_old, acmacs, timeit, normalize
from seqdb.update import SeqdbUpdater
from seqdb.hidb import HiDb

# ----------------------------------------------------------------------

def main(args):
    acmacs.api(args.acmacs_url)
    db = seqdb.Seqdb()
    hidb = HiDb(os.path.expandvars(os.path.expanduser(args.path_to_hidb)))
    files = collect_files(db, args.input, os.path.expandvars(os.path.expanduser(args.source_dir)))
    db_updater = SeqdbUpdater(db, filename=args.path_to_db, load=args.load, hidb=hidb)
    read_file_one_by_one_update_db(db_updater, files)
    db_updater.match_hidb()
    db_updater.add_clades()               # note clades must be updated after matching with hidb, because matching provides infor about B lineage
    print(db.report())
    if args.save:
        db_updater.save(indent=1)

# ----------------------------------------------------------------------

def read_file_one_by_one_update_db(db_updater, files):
    for f_no, file_entry in enumerate(files, start=1):
        module_logger.info('{} {}'.format(f_no, file_entry["f"]))
        data = read_file(file_entry)
        module_logger.info('{} entries to update seqdb with'.format(len(data)))
        # pprint.pprint(data)
        db_updater.add(data)

# ----------------------------------------------------------------------

def read_file(file_entry):
    csv_filename = file_entry["f"].replace(".fas", ".csv")
    if os.path.isfile(csv_filename):
        data = fasta_old.read_fasta_with_csv(fasta_file=file_entry["f"], csv_file=csv_filename, **file_entry)
    else:
        data = fasta_m.read_fasta_with_name_parsing(fasta_file=file_entry["f"], **file_entry)
    return data

# ----------------------------------------------------------------------

def make_file_entry(db, fn):
    try:
        lab, subtype, date, *rest = os.path.basename(fn).split("-")
    except ValueError:
        # lab, subtype, date = "UNKNOWN", "B", "19000101"
        raise
    return {"lab": lab.upper(), "virus_type": normalize.virus_type(subtype), "date": date, "f": fn}

# ----------------------------------------------------------------------

def collect_files(db, input_files, source_dir):
    import glob
    if input_files:
        r = [make_file_entry(db, fn) for fn in input_files]
    else:
        r = [make_file_entry(db, fn) for fn in glob.glob(os.path.join(source_dir, "*.fas.bz2")) if "aminoacid.fas.bz2" not in fn]
    r.sort(key=lambda e: e["date"])
    module_logger.debug('{} fasta files found for {} {}'.format(len(r), sorted(set(e["lab"] for e in r)), sorted(set(e["virus_type"] for e in r))))
    return r

# ----------------------------------------------------------------------

with timeit(sys.argv[0]):
    try:
        import argparse
        parser = argparse.ArgumentParser(description=__doc__)
        parser.add_argument('input', nargs="*", help='Fasta files to process (instead of processing all in -i).')
        parser.add_argument('-i', '--input', action='store', dest='source_dir', default="~/ac/tables-store/sequences/", help='Directory with the original fasta, csv, etc. files.')
        parser.add_argument('--create', action='store_false', dest='load', default=True, help='Do not load existing database.')
        parser.add_argument('-n', '--no-save', action='store_false', dest='save', default=True, help='Do not save resulting database.')
        # parser.add_argument('--gene', action='store', dest='default_gene', default="HA", help='default gene.')
        parser.add_argument('--acmacs', action='store', dest='acmacs_url', default='https://localhost:1168', help='AcmacsWeb server host and port, e.g. https://localhost:1168.')
        parser.add_argument('--db', action='store', dest='path_to_db', required=True, help='Path to sequence database.')
        parser.add_argument('--hidb', action='store', dest='path_to_hidb', default="~/WHO", help='Path to directory with the HiDb files.')
        parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
        args = parser.parse_args()
        logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
        exit_code = main(args)
    except Exception as err:
        logging.error('{}\n{}'.format(err, traceback.format_exc()))
        exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
