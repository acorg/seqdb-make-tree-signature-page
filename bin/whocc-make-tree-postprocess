#! /usr/bin/env python3
# -*- Python -*-

"""
Postprocess data in the directories upon making tree via whocc-make-tree
"""

import sys
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
import traceback
from pathlib import Path
sys.path[:0] = [str(Path(sys.argv[0]).resolve().parents[1].joinpath("dist")), str(Path(sys.argv[0]).resolve().parents[1].joinpath("python"))]
import logging; module_logger = logging.getLogger(__name__)
from seqdb import make_tree, json, raxml as raxml_m, garli as garli_m

# ----------------------------------------------------------------------

def main(args):
    working_dir = Path(args.dir[0]).resolve()
    if False: # working_dir.joinpath("result.all.json").exists():
        results = json.loadf(working_dir.joinpath("result.all.json"))
    else:
        if working_dir.joinpath("raxml").is_dir():
            r_raxml = raxml_m.postprocess(target_dir=working_dir, source_dir=working_dir.joinpath("raxml"))
        else:
            r_raxml = None
        if working_dir.joinpath("garli").is_dir():
            r_garli = garli_m.postprocess(target_dir=working_dir, source_dir=working_dir.joinpath("garli"))
        else:
            r_garli = None
        if r_raxml and r_garli:
            results = make_tree.make_results(working_dir, r_raxml=r_raxml, r_garli=r_garli, seqdb=args.path_to_seqdb)
        else:
            results = None
    if results:
        make_tree.make_r_garli_start_final_scores(working_dir, results)

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')

    parser.add_argument('dir', nargs=1, help='directory where tree data stored.')
    parser.add_argument('--db', action='store', dest='path_to_seqdb', default="/Users/eu/WHO/seqdb.json.xz", help='Path to sequence database.')

    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
