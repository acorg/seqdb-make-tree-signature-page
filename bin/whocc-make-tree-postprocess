#! /usr/bin/env python3
# -*- Python -*-

"""
Postprocess data in the directories upon making tree via whocc-make-tree
"""

import sys
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
import traceback
from pathlib import Path
sys.path[:0] = [str(Path(sys.argv[0]).resolve().parents[1].joinpath("dist")), str(Path(sys.argv[0]).resolve().parents[1].joinpath("python"))]
import logging; module_logger = logging.getLogger(__name__)

# ----------------------------------------------------------------------

def main(args):
    if Path(args.dir[0], "result.all.json").exists():
        from seqdb import json
        results = json.loadf(Path(args.dir[0], "result.all.json"))
    else:
        if Path(args.dir[0], "raxml").is_dir():
            from seqdb import raxml as raxml_m
            r_raxml = raxml_m.postprocess(target_dir=Path(args.dir[0]), source_dir=Path(args.dir[0], "raxml"))
        else:
            r_raxml = None
        if Path(args.dir[0], "garli").is_dir():
            from seqdb import garli as garli_m
            r_garli = garli_m.postprocess(target_dir=Path(args.dir[0]), source_dir=Path(args.dir[0], "garli"))
        else:
            r_garli = None
        if r_raxml and r_garli:
            from seqdb import make_tree
            results = make_tree.make_results(Path(args.dir[0]), r_raxml=r_raxml, r_garli=r_garli)
        else:
            results = None
    # if results:
    #     make_r(results)

# ----------------------------------------------------------------------

def make_r(results):
    if results["garli"]:
        min_score = min(min(e["score"] for e in results["garli"]), min(e["start_score"] for e in results["garli"]))
        max_score = max(max(e["score"] for e in results["garli"]), max(e["start_score"] for e in results["garli"]))
        print('plot(c(1, {num_results}), c({min_score}, {max_score}), type="l", main="Score improvement by GARLI", xlab="no", ylab="GARLI score")'.format(num_results=len(results["garli"]), min_score=min_score, max_score=max_score))
        for no, r in enumerate(results["garli"]):
            print('lines(rbind(c({}, {}), c({}, {})))'.format(no, r["start_score"], no, r["score"]))

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')

    parser.add_argument('dir', nargs=1, help='directory where tree data stored.')

    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
