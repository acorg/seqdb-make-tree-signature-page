#! /usr/bin/env python3
# -*- Python -*-

"""
Scans sequences.
"""

import sys, os, traceback
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
from pathlib import Path
sys.path[:0] = [str(Path(sys.argv[0]).resolve().parents[1].joinpath("dist")), str(Path(sys.argv[0]).resolve().parents[1].joinpath("python"))]
import logging; module_logger = logging.getLogger(__name__)

import seqdb

# ----------------------------------------------------------------------

def main(args):
    db = seqdb.Seqdb()
    db.load(args.path_to_db)
    print('Seqdb has {} entries'.format(db.number_of_entries()))

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    # parser.add_argument('--flu', action='store', dest='virus_type', default='B', help='Scan this type/subtype: B, H1, H3, A(H1N1), A(H3N2).')
    # parser.add_argument('--pos', action='store', dest='pos', type=int, default=None, help='Report subsequences at given pos.')
    # parser.add_argument('--len', action='store', dest='len', type=int, default=None, help='Report subsequences at given pos with given length.')
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    parser.add_argument('--db', action='store', dest='path_to_db', required=True, help='Path to sequence database (loads db at default location if empty).')
    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
