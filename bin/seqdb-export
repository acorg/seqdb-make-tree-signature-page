#! /usr/bin/env python3
# -*- Python -*-

"""
Exports seqdb data into fasta.
"""

import sys, re, operator, collections, traceback
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
from pathlib import Path
sys.path[:0] = [str(Path(sys.argv[0]).resolve().parents[1].joinpath("dist")), str(Path(sys.argv[0]).resolve().parents[1].joinpath("python"))]
import logging; module_logger = logging.getLogger(__name__)

import seqdb
from seqdb import fasta as fasta_m, open_file, timeit, normalize

# ----------------------------------------------------------------------

def main(args):
    seq_db = seqdb.Seqdb()
    seq_db.load(filename=args.path_to_seqdb)
    fasta_m.export_from_seqdb(seqdb=seq_db,
                              filename=args.output,
                              output_format=args.output_format,
                              amino_acids=args.amino_acids,
                              lab=args.lab,
                              virus_type=args.virus_type,
                              lineage=args.lineage,
                              gene=args.gene,
                              start_date=args.start_date, end_date=args.end_date,
                              base_seq=args.base_seq,
                              name_format=args.name_format,
                              aligned=args.aligned,
                              truncate_left=args.truncate_left,
                              encode_name=args.name_encode,
                              wrap=args.sequence_wrap,
                              truncate_to_most_common_length=args.most_common_length,
                              hamming_distance_threshold=args.hamming_distance_threshold,
                              hamming_distance_report=args.hamming_distance_report,
                              sort_by=args.sort_by,
                              with_hi_name=args.with_hi_name,
                              name_match=args.name_match)

# ----------------------------------------------------------------------

with timeit(sys.argv[0]):
    try:
        import argparse
        parser = argparse.ArgumentParser(description=__doc__)
        parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')

        parser.add_argument('--lab', action='store', dest='lab', default=None, help='Export just for this lab.')
        parser.add_argument('--flu', action='store', dest='virus_type', default=None, help='Export just for this virus type/subtype: B, H1, H3, A(H1N1), A(H3N2).')
        parser.add_argument('--lineage', action='store', dest='lineage', default=None, help='Export just for this lineage: VICTORIA, YAMAGATA, 2009PDM.')
        parser.add_argument('--gene', action='store', dest='gene', default="", help='HA or NA.')
        parser.add_argument('--aligned', action='store_true', dest='aligned', default=False, help='Write aligned sequences.')
        parser.add_argument('--no-truncate-left', action='store_false', dest='truncate_left', default=True, help='Do not truncate left part of the sequence (e.g. signal peptide).')
        parser.add_argument('--start-date', action='store', dest='start_date', default=None, help='Export sequences for antigens isolated on or after that date (YYYYMMDD).')
        parser.add_argument('--end-date', action='store', dest='end_date', default=None, help='Export sequences for antigens isolated before that date (YYYYMMDD).')
        parser.add_argument('--with-hi-name', action='store_true', dest='with_hi_name', default=False, help='Export sequences having hi_name only (i.e. matched with HI data).')

        parser.add_argument('--name-match', action='store', dest='name_match', default=None, help='Export sequences with names matching this regex (just basic name, no passage, any part of the name, case ignored).')

        parser.add_argument('--most-common-length', action='store_true', dest='most_common_length', default=False, help='Truncate or extend with - all sequences to make them all of the same length, most common among original sequences.')
        parser.add_argument('--base-seq', action='store', dest='base_seq', default=None, help='Base sequence to export together with other sequences.')

        parser.add_argument('--sort', action='store', dest='sort_by', default="date", help='Sort list before exporting by "date", "name".')
        parser.add_argument('-f', '--format', action='store', dest='output_format', default='fasta', help='Output format: fasta, phylip')
        parser.add_argument('--name-format', action='store', dest='name_format', default='{name} {passage}', help='Name format, possible fields: {name} {date} {lab_id} {passage} {lab} {gene} {seq_id}. seq_id is used for later matching with seqdb data, e.g. when phylogenetic tree is made.')
        parser.add_argument('--name-encode', action='store_true', dest='name_encode', default=False, help='Encode spaces and parentheses in names')
        parser.add_argument('--amino-acids', action='store_true', dest='amino_acids', default=False, help='Export amino-acids instead of nucleotites')
        parser.add_argument('--no-wrap', action='store_false', dest='sequence_wrap', default=True, help='Do not wrap sequence and generate long lines')

        parser.add_argument('--hamming-distance-threshold', action='store', type=int, dest='hamming_distance_threshold', default=None, help='Select only sequences having hamming distance to the base sequence less than threshold. Use 150 for nucs (H3).')
        parser.add_argument('--hamming-distance-report', action='store_true', dest='hamming_distance_report', default=False)

        parser.add_argument('--db', action='store', dest='path_to_seqdb', required=True, help='Path to sequence database.')
        parser.add_argument('output', nargs="?", help='Fasta file to write.')

        args = parser.parse_args()
        logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
        exit_code = main(args)
    except Exception as err:
        logging.error('{}\n{}'.format(err, traceback.format_exc()))
        exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
