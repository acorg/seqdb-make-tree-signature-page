#! /usr/bin/env python3
# -*- Python -*-

"""
Exports seqdb data into fasta.
"""

import sys, re, operator, collections, traceback
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
from pathlib import Path
sys.path[:0] = [str(Path(sys.argv[0]).resolve().parents[1].joinpath("dist")), str(Path(sys.argv[0]).resolve().parents[1].joinpath("python"))]
import logging; module_logger = logging.getLogger(__name__)

import seqdb
from seqdb import fasta as fasta_m, open_file, timeit, normalize

# ----------------------------------------------------------------------

def main(args):
    seq_db = seqdb.Seqdb()
    with timeit("loading seqdb"):
        seq_db.load(filename=args.path_to_seqdb)
    with timeit("saving seqdb"):
        seq_db.save(filename=args.output, indent=1)

# ----------------------------------------------------------------------

with timeit(sys.argv[0]):
    try:
        import argparse
        parser = argparse.ArgumentParser(description=__doc__)
        parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')

        parser.add_argument('--db', action='store', dest='path_to_seqdb', required=True, help='Path to sequence database.')
        parser.add_argument('output', nargs="?", help='Seqdb to write.')

        args = parser.parse_args()
        logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
        exit_code = main(args)
    except Exception as err:
        logging.error('{}\n{}'.format(err, traceback.format_exc()))
        exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
